2007-08-12  Phil Terry  <pterry@micromemory.com>

	* Kinstall: Fixed symbolic link install of includes

2007-08-10  Phil Terry  <pterry@micromemory.com>

	* TODO: update to reflect fabric registration changes.

	* README: Added write up on fabric stuff.

	* Makefile (publish_doc): Split publishing tarballs and code from
	publishing documentation.

2007-08-09  Phil Terry  <pterry@micromemory.com>

	* Kbuild: Build rddma_fabric_net as a separate optional module
	which registers with the main driver when used.

	* rddma_fabric_net.c: Implement the fabric transport's side of the
	registration protocols.

	* rddma_fabric.c: Implement the driver's side of the
	fabric_transport registration handshakes.

	* rddma_fabric.h: Changes to get optional fabric_transports to
	register with driver and get used by locations. In progress not
	finished yet, may change.

	* rddma_xfer.c (new_rddma_xfer): use rddma_clone_xfer...

	* rddma_src.c (new_rddma_src): use rddma_clone_bind....

	* rddma_smb.c (new_rddma_smb): use rddma_clone_desc to deep copy orig_desc.

	* rddma_location.c (new_rddma_location): use rddma_clone_desc to
	deep copy orig_desc.

	* rddma_dst.c (new_rddma_dst): use rddma_clone_bind to deep copy orig_desc.

	* rddma_bind.c (new_rddma_bind): use rddma_clone_bind to deep copy
	orig_desc.

	* rddma_parse.[ch]: Add a carry through parameter orig_desc for use
	by inlines rddma_clone_{desc,bind,xfer} to "fix" string dup problems.

	* Kinstall: Add a force operation for use in install to avoid
	interactive question on what to do with overwriting backup.

2007-08-03  Phil Terry  <pterry@micromemory.com>

	* rddma_cdev.c: Took out spinlocks and put proper semaphore
	locking in. read operation should now block properly waiting for
	data from write unless you open O_NONBLOCK.

2007-08-02  Phil Terry  <pterry@micromemory.com>

	* rddma_fabric.c: leave request/reply echo to abstract operators.

	* rddma_ops.c: move reply/request tag handling into the
	operators. This functionality is required by the asynchronous cdev
	operators as much as the fabric operators so it doesn't make sense
	to duplicate the code/functionality.

	* rddma_parse.c (rddma_str_dup): Red Face Alert!

	* rddma_cdev.c: What can I say. Sorry! So lengths, counts,
	offsets, you name it was missing and if it wasn't missing it was
	wrong. But all better now?

2007-07-30  Phil Terry  <pterry@micromemory.com>

	* rddma_parse.c (rddma_str_dup): tidy up some functions to Jimmy's standard.

	* Makefile (publish): New website location

	* Kinstall: Had to rename install script otherwise make install doesn't work... :-)

2007-07-26  Phil Terry  <pterry@micromemory.com>

	* install: This script superceeds symlink script. Use it to
	symlink your includes so that the out of tree build works. I'm
	transitioning to an intree kernel build so that we can sort out
	the Kconfig requirements as well. Using this script I'll try and
	keep the out of tree tarball working in parallel until such time
	as we are all transitioned to a stable project kernel.

	* Makefile (tar): Exclude git repository and TAGS file

2007-07-25  Phil Terry  <pterry@micromemory.com>

	* Makefile (publish): Add TODO file

2007-07-24  Phil Terry  <pterry@micromemory.com>

	* rddma_dma_rio.c: Start integrating Jimmy's DMA code.
	Add functions for linking all the descriptors together as we build
	the xfer structures. xfer->head_bind is a mega-list of descriptors
	ready to go.

	* rddma_local_ops.c (rddma_local_srcs_create): First stab.

	* rddma_ops.c: Fixed all of the operators and do_operation so that
	the return value is as for snprintf for the result,size buffer
	provided in the call parameters. The semantics is that an
	operation will print back its parameters canonicalized where
	applicable together with a ?result=%d result string on the end if
	you supply a result buffer. If you provide a null buffer pointer
	the result will be 0 unless an error occured when the negative
	value normally returned in ?result=%d is returned. If returned
	value is equal or greater than size then the result has been
	truncated.  Fixed all operator replies against accidentally
	returning the original ?request=%x strings.

	* rddma_fabric_net.c: Fix up registering of low level functions to
	dev_add_pack, etc

	* rddma_fabric_ops.c: First stab at delete operators.

2007-07-23  Phil Terry  <pterry@micromemory.com>

	* rddma_fabric_ops.c: First stab at create operators.

	* symlinks: A script to symlink the include files into the linux
	tree so that we can do in tree and module builds. Can start
	working on the Kconfig files... Sed all files to include
	<linux/rddma_xxx.h> instead of the old "rddma_xxx.h" so you have
	to use this script.

	* rddma_fabric_ops.c: First stab at the find operations.

	* Generally lots of changes to simplify the implementation of the
	higher ops and rationalize the distributed protocol
	interactions. I'm basically using a four way test case, badly
	documented in the end of the README, to flesh everything out. A
	requestor asks a dma xfer to do a third party transfer from a
	source to a destination, ie four boards involved in the set up of
	a single transfer. Its getting there.

	* rddma_local_ops.c: Trying to get create_xfer et al to work.

	* rddma_fabric.h: Clarify the intended structure and interfaces of
	the drivers lower interface to the fabric.

	* Makefile (publish): Copy README for the driver to website.

2007-07-20  Phil Terry  <pterry@micromemory.com>

	* README: Wrote up the flow for create_xfer://... This required
	that I change the type hierarchy. Fortunately this was just
	reorganizing the way they link together rather than any wholesale
	change of functionality. Now need to implement it.

	* rddma_location.c (find_rddma_location): I finally think I've got
	the recursion right for location creation as a by-product of name
	lookups with find. This vastly simplifies all other operations.

2007-07-19  Phil Terry  <pterry@micromemory.com>

	* rddma_dma.c: Just roughing out some module stuff for the dma
	driver. This will act in the same way as the rio driver to just
	provide an internal low-level API for use by the rest of the rddma
	driver. Some initial thoughts on layering it to use a
	rddma_dma_net, rddma_dma_rio, etc, in an analogous fashion to the
	rddma_fabric stack.

	* rddma_local_ops.c: With the new parameter passing revamp all the
	type find/create/delete methods and get them working with
	rddma_local_ops and local_ops. Now onto the network and fabric ops.

2007-07-18  Phil Terry  <pterry@micromemory.com>

	* rddma_parse.[ch]: Revamp the whole parameter passing API to
	reduce the amount of rescanning/str duping going on. Hopefully
	this reduces string lifetime management problems as well.

2007-07-17  Phil Terry  <pterry@micromemory.com>

	* rddma.h (RDDMA_DEBUG): Fixed that pesky variadic macro stuff...

	* rddma_fabric_net.c: Add the network abstraction layer to allow
	rddma_fabric to run over rionet, rddma_net or ethernet. 

	* rddma_net.c: A clone of rionet but using mbox 1 and different doorbells.

2007-07-16  Phil Terry  <pterry@micromemory.com>

	* DocBook/README: How to autogenerate documentation. Now we just need to write some...

2007-07-15  Phil Terry  <pterry@micromemory.com>

	* DocBook: Start trying to automate documentation generation.

2007-07-14  Phil Terry  <pterry@micromemory.com>

	* README: Added this to try and keep things straight, i.e., where
	does this function fit in to the grand scheme of things again?

2007-07-13  Phil Terry  <pterry@micromemory.com>

	* Makefile (publish): Have it publish this changelog to my website along with the tarball.

	* First stab. It compiles.

