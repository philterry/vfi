<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
        "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
	<!ENTITY rapidio SYSTEM "rapidio.xml">
	]>

<book id="RDDMA-Guide">
 <bookinfo>
  <title>RDDMA Subsystem Guide</title>

  <authorgroup>
   <author>
    <firstname>Phil</firstname>
    <surname>Terry</surname>
    <affiliation>
     <address>
      <email>pterry@micromemory.com</email>
     </address>
    </affiliation>
   </author>
  </authorgroup>

  <copyright>
   <year>2007</year>
   <holder>Micro Memory LLC.</holder>
  </copyright>

  <legalnotice>
   <para>
     This documentation is free software; you can redistribute
     it and/or modify it under the terms of the GNU General Public
     License version 2 as published by the Free Software Foundation.
   </para>

   <para>
     This program is distributed in the hope that it will be
     useful, but WITHOUT ANY WARRANTY; without even the implied
     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
     See the GNU General Public License for more details.
   </para>

   <para>
     You should have received a copy of the GNU General Public
     License along with this program; if not, write to the Free
     Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
     MA 02111-1307 USA
   </para>

   <para>
     For more details see the file COPYING in the source
     distribution of Linux.
   </para>
  </legalnotice>
 </bookinfo>

<toc></toc>

  <chapter id="intro">
      <title>Introduction</title>
  <para>
	The Rincon Distributed DMA (RDDMA) Subsystem is a bulk
	transfer IPC for a multi-computer system based on DMA over a
	backplane fabric. The initial implementation is based on the
	DMA driver of the FreeScale MPC8641D processor and its Serial
	RapidIO fabric interfaces.
  </para>
  <para>
        The complete software stack consists of a userland API, plus
        the kernel RDDMA, DMA and fabric drivers. This document covers
        only the kernel drivers. The API is covered in a separate
        document.
  </para>
  <para>
  	This documentation is provided for developers intending
	to support RDDMA on new architectures, write new drivers,
	or to understand the subsystem internals.
  </para>
  </chapter>

  <chapter id="bugs">
     <title>Known Bugs and Limitations</title>

     <sect1>
     	<title>Bugs</title>
	  <para>None. ;)</para>
     </sect1>
     <sect1>
     	<title>Limitations</title>
	  <para>
	    None Known.
	 </para>
     </sect1>
  </chapter>

<chapter id="overview">
<title>Overview</title>
<para>
The RDDMA system is based around a limited number of abstract types
and a few operations on those types. The types are arranged in a
hierarchy with the operations on each type inherited from its parent type.
</para>
<para>The base type is a "location." The location types operators
cover the concepts of communicating the operation to the target
location, in otherwords the remote procedure call over the fabric. A
"location" instance representing the local node may also be defined in
terms of "local" operations. These are unable to communicate with
remote locations and participate in remote operations but simply mimic
the system locally. This limits the RDDMA operations to local sharing
between processes. This is analogous to performing RPC on the loopback
address of 127.0.0.1 in TCP/IP as opposed to performing the same RPC
on the routable address which represents the node, say
192.168.x.y. The former can do all of the same operations as the
latter but cannot communicate with remote partners.</para>

<para>This system of abstract type operations operates in
multi-threaded kernel threads.</para>

<para>Local processes interact with this subsystem using file
operations on a char device. These operations are responsible for
taking the application requests and passing them to the
subsystem. They can do this syncrhonously or asynchronously using
read/write, or aio_read/aio_write respectively. What it written and
read is not the data to be DMA'd or exchanged between processes but
rather string representing the operations abstractly.</para>
</chapter>

  <chapter id="drivers">
     	<title>RDDMA driver</title>
<para>
The driver is designed and implemented as an abstract driver executing
abstract operations within the kernel. The interface to this is
defined in rddma_ops.[ch]. This interface consists of a single
function called do_operation. Concrete interfaces, from either user space
processes or from remote processes via remote procedure calls over a
fabric, are then implemented around this. So for example,
rddma_cdev.[ch] takes a char device interface providing
read/write/mmap/aio_read/aio_write etc., and creates a mechanism to
interface these concrete interfaces to the do_operation interface of
the abstract driver. Similarly, rddma_fabric.[ch] takes an abstract
hardware independent fabric interface based on messages, and
interfaces it to do_operation.
</para>
<para>
The central abstract driver runs multithreaded and asynchronously. So
the concrete interfaces must either match their interfaces in the same
way, or manufacture mechanisms to hide this fact, presenting a
synchronous, single threaded interface if desired.
</para>
<para>
The single interface do_operation achieves its polymorphism by virtue
of using a string interface which is semantically parsed. The
definitions of this interface and supporting functions to implement it
are defined in rddma_parse.[ch].
</para>
	<sect1>
		<title>rddma_ops</title>
	<para>
	The driver provides a single interface function, do_operation,
which takes a string and returns a string in the supplied result
buffer. The input string meets a syntax required to define the
operation requested, the parameters of that operation, plus any flags
or options. The result string provides a similar syntax string to
indicate any results or flags resulting from the operation. The return
value of do_operation is the number of characters written to the
output buffer or is a negative error value if a gross error has
occured. If you specify a null pointer for the result buffer, no
result string is generated and the return value indicates success
(zero) or error (negative) for the operation.
	</para>

<para>
In this section I list the currently defined operations available
through do_operation. Understand that these functions are in fact all
static and private to rddma_ops.c and are only accessible through the
interface of do_operation, you cannot call them directly.
</para>
<para>
Only do_operation is a public callable function. </para>
!Idrivers/rddma/rddma_ops.c
	</sect1>
<sect1>
<title>rddma_parse</title>
!Iinclude/linux/rddma_parse.h
!Idrivers/rddma/rddma_parse.c
</sect1>
  </chapter>

</book>
